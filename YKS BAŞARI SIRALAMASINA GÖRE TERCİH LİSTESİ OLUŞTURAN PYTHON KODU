# Örnek bölüm sıralamaları
bolumler = {
    'Mühendislik': 40000,
    'Hukuk': 15000,
    'Edebiyat': 50000,
    'Tıp': 10000,
    'İşletme': 60000,
    'Mimarlık': 30000,
    'Bilgisayar Bilimleri': 20000,
    # Daha fazla bölüm ekleyebilirsiniz...
}
def tercih_listesi_olustur(kisisel_siralama):
    tercihler = []
    # İlk 3 tercih için %10 daha iyi sıralama
    for i in range(1, 4):
        tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.10))
    # 4. tercih için %15 daha iyi sıralama
    tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.15))
    # 5. tercih için %20 daha iyi sıralama
    tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.20))
    # 6. tercih için %30 daha iyi sıralama
    tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.30))
    # 7'den 13'e kadar tercihler için %10 daha iyi sıralama
    for i in range(7, 14):
        tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.10))
    # 14'ten 19'a kadar tercihler için %10 daha kötü sıralama
    for i in range(14, 20):
        tercihler.append(kisisel_siralama + int(kisisel_siralama * 0.10))
    # 20'den 24'e kadar tercihler için %10-%40 daha kötü sıralama
    for i in range(20, 25):
        tercihler.append(kisisel_siralama + int(kisisel_siralama * (0.10 + (i - 20) * 0.075)))
    # Tercih listesini bölüm sıralamalarıyla eşleştirme
    eslesen_tercihler = {}
    for tercih in tercihler:
        for bolum, siralama in bolumler.items():
            if siralama <= tercih:
                eslesen_tercihler[bolum] = siralama
                break
    # Eğer hiçbir bölüm eşleşmediyse, en iyi sıralamalı bölümleri ekle
    if not eslesen_tercihler:
        for bolum, siralama in sorted(bolumler.items(), key=lambda item: item[1]):
            eslesen_tercihler[bolum] = siralama
            if len(eslesen_tercihler) == 6:  # İlk 6 bölümü al
                break
    return eslesen_tercihler
# Kullanıcıdan sıralama bilgisi alma
kisisel_siralama = int(input('Lütfen YKS sıralamanızı giriniz: '))
# Tercih listesini oluşturma ve yazdırma
tercih_listesi = tercih_listesi_olustur(kisisel_siralama)
print('Tercih edebileceğiniz bölümler ve sıralamaları:')
for bolum, siralama in tercih_listesi.items():
    print(f'{bolum}: {siralama}')


Bu Python kodu, bir öğrencinin Yükseköğretim Kurumları Sınavı (YKS) sıralamasına göre tercih edebileceği üniversite bölümlerini belirlemek için yazılmış. İşte kodun satır satır açıklaması:
python
# Örnek bölüm sıralamaları
bolumler = {
    'Mühendislik': 40000,
    'Hukuk': 15000,
    'Edebiyat': 50000,
    'Tıp': 10000,
    'İşletme': 60000,
    'Mimarlık': 30000,
    'Bilgisayar Bilimleri': 20000,
    # Daha fazla bölüm ekleyebilirsiniz...
}
Bu sözlük yapısı, çeşitli üniversite bölümlerinin ve bu bölümlere giriş için gereken sıralamaların bir listesini içerir.
python
def tercih_listesi_olustur(kisisel_siralama):
    tercihler = []
tercih_listesi_olustur fonksiyonu, kullanıcının YKS sıralamasını parametre olarak alır ve tercih listesini oluşturmak için kullanılır.
python
    # İlk 3 tercih için %10 daha iyi sıralama
    for i in range(1, 4):
        tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.10))
Kullanıcının ilk üç tercihi için, kendi sıralamasından %10 daha iyi bir sıralama hesaplanır ve tercihler listesine eklenir.
python
    # 4. tercih için %15 daha iyi sıralama
    tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.15))
Dördüncü tercih için, kendi sıralamasından %15 daha iyi bir sıralama hesaplanır ve listeye eklenir.
python
    # 5. tercih için %20 daha iyi sıralama
    tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.20))
Beşinci tercih için, kendi sıralamasından %20 daha iyi bir sıralama hesaplanır ve listeye eklenir.
python
    # 6. tercih için %30 daha iyi sıralama
    tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.30))
Altıncı tercih için, kendi sıralamasından %30 daha iyi bir sıralama hesaplanır ve listeye eklenir.
python
    # 7'den 13'e kadar tercihler için %10 daha iyi sıralama
    for i in range(7, 14):
        tercihler.append(kisisel_siralama - int(kisisel_siralama * 0.10))
Yedinci ile on üçüncü tercihler arası için, kendi sıralamasından %10 daha iyi bir sıralama hesaplanır ve listeye eklenir.
python
    # 14'ten 19'a kadar tercihler için %10 daha kötü sıralama
    for i in range(14, 20):
        tercihler.append(kisisel_siralama + int(kisisel_siralama * 0.10))
On dördüncü ile on dokuzuncu tercihler arası için, kendi sıralamasından %10 daha kötü bir sıralama hesaplanır ve listeye eklenir.
python
    # 20'den 24'e kadar tercihler için %10-%40 daha kötü sıralama
    for i in range(20, 25):
        tercihler.append(kisisel_siralama + int(kisisel_siralama * (0.10 + (i - 20) * 0.075)))
Yirminci ile yirmi dördüncü tercihler arası için, kendi sıralamasından %10 ile %40 arası kötü bir sıralama hesaplanır ve listeye eklenir.
python
    # Tercih listesini bölüm sıralamalarıyla eşleştirme
    eslesen_tercihler = {}
    for tercih in tercihler:
        for bolum, siralama in bolumler.items():
            if siralama <= tercih:
                eslesen_tercihler[bolum] = siralama
                break
Oluşturulan tercih sıralamaları, bölüm sıralamalarıyla karşılaştırılır ve eşleşen bölümler eslesen_tercihler sözlüğüne eklenir.
python
    # Eğer hiçbir bölüm eşleşmediyse, en iyi sıralamalı bölümleri ekle
    if not eslesen_tercihler:
        for bolum, siralama in sorted(bolumler.items(), key=lambda item: item[1]):
            eslesen_tercihler[bolum] = siralama
            if len(eslesen_tercihler) == 6:  # İlk 6 bölümü al
                break
Eğer hiçbir bölüm eşleşmezse, en iyi sıralamalı altı bölüm `eslesen_tercihler` sözlüğüne eklenir.
python
    return eslesen_tercihler
Eşleşen tercihler sözlüğü döndürülür.
python
# Kullanıcıdan sıralama bilgisi alma
kisisel_siralama = int(input('Lütfen YKS sıralamanızı giriniz: '))
Kullanıcıdan YKS sıralaması istenir.
python
# Tercih listesini oluşturma ve yazdırma
tercih_listesi = tercih_listesi_olustur(kisisel_siralama)
print('Tercih edebileceğiniz bölümler ve sıralamaları:')
for bolum, siralama in tercih_listesi.items():
    print(f'{bolum}: {siralama}')
Kullanıcının sıralamasına göre tercih listesi oluşturulur ve ekrana yazdırılır.
Bu kod parçası, öğrencilerin tercih yaparken kullanabilecekleri bir tercih robotu mantığına sahiptir. Öğrencinin sıralamasına göre, hangi bölümleri tercih edebileceğini gösterir. Kodun sonunda kullanıcıdan sıralama bilgisi alınır ve bu bilgiye göre tercih listesi oluşturulup ekrana yazdırılır.
